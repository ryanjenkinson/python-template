[project]
name = "mypackage"
version = "0.0.1"
description = "A short description about mypackage"
authors = [
  {name = "Ryan Jenkinson", email = "hello@ryan.eco" }
]
maintainers = [
  {name = "Ryan Jenkinson", email = "hello@ryan.eco" }
]
readme = "README.md"
packages = [
    { include = "mypackage" },
]
requires-python = ">=3.10, <4.0"
# Not actually used in this simple project, just want to see how dependencies are managed with dependabot
dependencies = [
    "pandas>=2.1.3",
]

[project.optional-dependencies]
# Also not used in this project, just want to see how dependencies are managed with dependabot
plotting = [
    "plotly>=5.18.0",
]

[tool.rye]
managed = true
dev-dependencies = [
    "pre-commit>=3.5.0",
    "xdoctest>=1.1.2",
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "ruff>=0.2",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.9",
    "mkdocs-awesome-pages-plugin>=2.9.2",
    "mkdocstrings[python]>=0.24.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.urls]
"Repository" = "https://github.com/ryanjenkinson/mypackage"
"Documentation" = "https://github.com/ryanjenkinson/mypackage/tree/main/docs/api/"
"Author Website" = "https://ryan.eco"

[tool.ruff]
extend-include = ["*.ipynb"]
target-version = 'py311'

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
ignore = [
    "E501", # line too long
]
select = [
    "C9", # mccabe complexity - have simple variable names
    "E", # pycodestyle - errors
    "F", # pyflakes
    "W", # pycodestyle - warnings
    "D", # pydocstyle
    "G", # flake8 - logging formatting
    "A", # flake8 - builtins
    "PT", # flake8 - pytest style
    "S", # flake8 - bandit
    "B", # flake8 - bugbear
    "ANN", # flake8 - annotations
    "SIM", # flake8 - simplify
    "I", # isort
    "N", # pep8 naming
    "PD", # pandas-vet
    "PTH", # use pathlib over os
]
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "S101", # Allow assert statements in tests
  "D100", # Docstring in public module
  "D103", # Docstring in public function (we shouldnt need to document all tests)
  "ANN201", # Missing type annotation for public function (we shouldnt need return types for tests)
]
"__init__.py" = [
  "D104", # Missing docstring in public package
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
--verbose \
--maxfail=1 \
--color=yes \
--cov=mypackage \
--cov-fail-under=90 \
--cov-report term-missing \
--doctest-modules \
--cov-config=pyproject.toml"""


[tool.rye.scripts]
setup-dev = { chain = ["install:dev", "install:pre-commit"] }
install = "rye sync --no-dev"
"install:dev" = "rye sync"
run = "python -m mypackage"
test = "pytest"
"install:pre-commit" = "pre-commit run --all-files"
lint = "ruff check . --fix"
format = "ruff format ."
docs = "mkdocs serve --use-directory-urls -f docs/mkdocs.yaml"
docs-html = "mkdocs build --no-directory-urls -f docs/mkdocs.yaml"
docs-publish = """mkdocs gh-deploy \
--config-file docs/mkdocs.yaml \
--no-directory-urls \
--remote-branch docs"""
# Rye scripts can't handle a complicated docker build script like below just yet
# docker-build = { cmd = """docker build --build-arg BUILDTAG=$BUILD_TAG --build-arg BUILDPLATFORM=$BUILD_PLATFORM --target $TARGET -t mypackage:$target-$build_tag .""", env = { BUILD_TAG = "3.11-slim", BUILD_PLATFORM = "linux/amd64", TARGET = "prod"} }
